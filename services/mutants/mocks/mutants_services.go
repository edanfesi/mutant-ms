// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	mutants "mutant-ms/models/mutants"

	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// GetStats provides a mock function with given fields: ctx
func (_m *Services) GetStats(ctx context.Context) (mutants.MutantStats, error) {
	ret := _m.Called(ctx)

	var r0 mutants.MutantStats
	if rf, ok := ret.Get(0).(func(context.Context) mutants.MutantStats); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(mutants.MutantStats)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMutant provides a mock function with given fields: ctx, dna
func (_m *Services) IsMutant(ctx context.Context, dna []string) error {
	ret := _m.Called(ctx, dna)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, dna)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateDna provides a mock function with given fields: ctx, dna
func (_m *Services) ValidateDna(ctx context.Context, dna []string) error {
	ret := _m.Called(ctx, dna)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, dna)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
